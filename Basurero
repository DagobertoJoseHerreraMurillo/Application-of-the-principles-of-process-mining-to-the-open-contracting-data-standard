
Process Mining and Fraud Detection
https://www.semanticscholar.org/paper/Process-Mining-and-Fraud-Detection-Stoop-Oezer/6949a33423051ce6fa5b08fb7d5f06ac9dcc721b





Directorio de carga C:\Users\Dagoberto.Neo4jDesktop\neo4jDatabases\database-f0deac7c-28e7-4fc6-bc3c-0c4ef4bbd86e\installation-3.5.2\import

Guia sobre cómo abrir https://medium.com/neo4j/neo4j-get-off-the-ground-in-30min-or-less-3a226a0d48b1 Guía sobre cómo cargar https://neo4j.com/graphgist/importing-csv-files-with-cypher

#Create companies LOAD CSV WITH HEADERS FROM "file:///companies.csv" AS row CREATE (p:Company {id: (row.id), name: row.name})

#Create contracts LOAD CSV WITH HEADERS FROM "file:///contracts.csv" AS row CREATE (contract:Contract{id:(row.id)})

#Create constrains CREATE CONSTRAINT ON (p:Company) ASSERT p.id IS UNIQUE CREATE CONSTRAINT ON (contract:Contract) ASSERT contract.id IS UNIQUE

#Create relations LOAD CSV WITH HEADERS FROM "file:///relations.csv" AS row MATCH (company:Company { id:(row.company)}),(contract:Contract { id:(row.contract)}) CREATE (company)-[:PARTICIPATED]->(contract)

Unsupervised fraud detection

Association rules

#colusión https://aristeguinoticias.com/1707/lomasdestacado/78-de-contratos-publicos-por-adjudicacion-directa-en-2017-por-licitacion-solo-12-cofece/ https://www.eleconomista.com.mx/empresas/Cofece-investiga-posible-colusion-en-mercado-de-higiene-20180504-0033.html
https://www.eleconomista.com.mx/empresas/Nueve-de-cada-10-contratos-publicos-no-se-licitan-20180717-0050.html

Referencias

#Estafa maestra https://www.youtube.com/watch?v=aHMUs1cGypE&feature=youtu.be ASF datos http://www.asfdatos.gob.mx/

Agenda de Competencia para un ejercicio íntegro en las Contrataciones Públicas https://www.cofece.mx/wp-content/uploads/2018/07/CPC-ContratacionesPublicas.pdf

Reporte de los datos relevantes de los contratos ingresados a CompraNet que iniciaron vigencia 2010-2019 https://sites.google.com/site/cnetuc/contrataciones

XES format
http://www.xes-standard.org/





LOAD CSV WITH HEADERS FROM "file:///companies.csv" AS row CREATE (p:Company {rfc: (row.rfc), name: row.name})

LOAD CSV WITH HEADERS FROM "file:///contracts.csv" AS row CREATE (contract:Contract{ocid:(row.ocid)})

LOAD CSV WITH HEADERS FROM "file:///contacts.csv" AS row CREATE (contact:Contact{contact:(row.contact)})

LOAD CSV WITH HEADERS FROM "file:///address.csv" AS row CREATE (address:Address{address:(row.address)})

#Atender los strings de varios correos
LOAD CSV WITH HEADERS FROM "file:///email.csv" AS row CREATE (email:Email{email:(row.email)})

#Atender los strings de varios telefonos
LOAD CSV WITH HEADERS FROM "file:///telephone.csv" AS row CREATE (telephone:Telephone{telephone:(row.telephone)})

LOAD CSV WITH HEADERS FROM "file:///rcc.csv" AS row MATCH (company:Company { rfc:(row.rfc)}),(contract:Contract { ocid:(row.ocid)}) CREATE (company)-[:PARTICIPATED]->(contract)

LOAD CSV WITH HEADERS FROM "file:///rc.csv" AS row MATCH (company:Company { rfc:(row.rfc)}),(contact:Contact {contact:(row.contact)}) CREATE (company)-[:CONTACT]->(contact)

LOAD CSV WITH HEADERS FROM "file:///ra.csv" AS row MATCH (company:Company { rfc:(row.rfc)}),(address:Address {address:(row.address)}) CREATE (company)-[:ADDRESS]->(address)

LOAD CSV WITH HEADERS FROM "file:///re.csv" AS row MATCH (company:Company { rfc:(row.rfc)}),(email:Email {email:(row.email)}) CREATE (company)-[:EMAIL]->(email)

LOAD CSV WITH HEADERS FROM "file:///rT.csv" AS row MATCH (company:Company { rfc:(row.rfc)}),(telephone:Telephone {telephone:(row.telephone)}) CREATE (company)-[:TELEPHONE]->(telephone)


#Create constrains CREATE CONSTRAINT ON (p:Company) ASSERT p.id IS UNIQUE CREATE CONSTRAINT ON (contract:Contract) ASSERT contract.id IS UNIQUE



MATCH (p1:Company)-[:CONTACT|TELEPHONE*]->(p3)<-[:CONTACT|TELEPHONE*]-(p2:Company) WHERE p1 <> p2 RETURN *
